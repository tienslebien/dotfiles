" ':help options' ou ':help nom_du_paramètre' ou <F1> sur un mot
" pour avoir de l'aide sur les paramètres de ce fichier de configuration

""""""""""
" Bundle "
""""""""""

if &compatible
  set nocompatible
endif

" Required:
set runtimepath+=/home/etienne/.vim/bundle/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin('/home/etienne/.vim/bundle')

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')


" great statusline
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
" Colorscheme
call dein#add('romainl/Apprentice')
call dein#add('dracula/vim')

""" My Bundles here:
"
" Informations sur le charactère (ga)
"call dein#add('tpope/vim-characterize')
" Où sont définis les map (:Listmaps)
"call dein#add('listmaps.vim')

" Ajoute une goutiere avec les marques
call dein#add('tomtom/quickfixsigns_vim')
" En cas de mauvaise autocomplétion, propose un choix de fichier
call dein#add('EinfachToll/DidYouMean')
" visualisation du undotre
call dein#add('mbbill/undotree')
" Incrémente, décrémente date heure etc
call dein#add('tpope/vim-speeddating')
" t/f multiligne
call dein#add('svermeulen/vim-extended-ft')
" déplacement facilité
call dein#add('Lokaltog/vim-easymotion')
" / Affiche la position du match sur l'ensemble des match possibles
call dein#add('henrik/vim-indexed-search')
" incsearch sur tous les match
call dein#add('haya14busa/incsearch.vim')
" Surligne le mot sous le curseur (<leader>k)
call dein#add('vasconcelloslf/vim-interestingwords')
" * sur la selection
call dein#add('nelstrom/vim-visual-star-search')
" facilite la recherche, la substitution et les abbréviations
call dein#add('tpope/vim-abolish')
" % évolué
call dein#add('tmhedberg/matchit')
" « . » répète les plugins
call dein#add('tpope/vim-repeat')
" Dans quelle parenthèse se trouve t'on
call dein#add('arnar/vim-matchopen')
" sur un tag html, cherche la balise associée
" Snippets
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
" Ajoute les caractères fermant automatiquement
call dein#add('jiangmiao/auto-pairs')
" Autocompletion
call dein#add('Shougo/deoplete.nvim')
call dein#add('Valloric/MatchTagAlways')
" pour le tag <a>, ne souligne que le texte
call dein#add('tudorprodan/html_annoyance.vim')
" Manipulation des caractères entourant qqch
call dein#add('tpope/vim-surround')
" Permet de définir un text object (lib)
call dein#add('kana/vim-textobj-user')
" text object pour les attribut XML
call dein#add('whatyouhide/vim-textobj-xmlattr')
" Permet de définir un opérateur (lib)
call dein#add('kana/vim-operator-user')
" Remplace un objet texte par un autre
call dein#add('kana/vim-operator-replace')
" Flash le code copié
call dein#add('haya14busa/vim-operator-flashy')
" syntax checking
call dein#add('neomake/neomake')
" syntax checking for js
call dein#add('benjie/neomake-local-eslint.vim')
" met en valeur les scopes
call dein#add('bigfish/vim-js-context-coloring', { 'build': 'npm install --update' })
" Support pour JSON
call dein#add('elzr/vim-json')
" Support pour JSX
call dein#add('mxw/vim-jsx')
" Support pour Vue
call dein#add('posva/vim-vue')
" Support pour typeScript
call dein#add('leafgarland/typescript-vim')
" syntax js pour le DOM, Ajax...
call dein#add('othree/yajs.vim')
call dein#add('gavocanov/vim-js-indent')
" syntax js pour des lib usuelles (jQuery, angularJS...)
call dein#add('othree/javascript-libraries-syntax.vim')
" syntax html dans les fichiers js
call dein#add('Quramy/vim-js-pretty-template')
" Support pour HTML5
call dein#add('othree/html5.vim')
" Support pour CSS3
call dein#add('hail2u/vim-css3-syntax')
" Support pour SCSS
call dein#add('cakebaker/scss-syntax.vim')
" Support less
call dein#add('groenewege/vim-less')
" Couleur CSS
call dein#add('ap/vim-css-color')
" Dockerfile syntax
call dein#add('ekalinin/Dockerfile.vim')

" Permet d'écrire des tableau
call dein#add('dhruvasagar/vim-table-mode')

" Navigation entre buffers
call dein#add('bsdelf/bufferhint')

" hard mode, pour un perfectionnement de vim
call dein#add('wikitopian/hardmode')


" Required:
call dein#end()


"""""""""""""""""""""""""
" Configuration general "
"""""""""""""""""""""""""

" demande avant de quitter un fichier non sauvegardé
set confirm

" Configuration locale
set exrc
set secure
set modelines=0

"Mode UNIX : retour à la ligne = \n
set fileformat=unix
set fileformats=unix

"Encodage des caractères en utf-8
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
scriptencoding utf-8

" À l'ouverture d'un fichier, ouvre le buffer associé si il existe
set switchbuf=useopen

" Nombre de commandes dans l'historique
set history=500

" Options du fichier ~/.viminfo
"set viminfo=!,'100,<100,s100,:0,/100,h,

" undo
set undofile
set undodir=~/.vim/undodir

" swap
set swapfile
if !has('nvim')
  set swapsync="fsync"
endif

" backup copy
set backupcopy=yes

" Active la touche Backspace
set backspace=start,indent,eol

" Autorise le passage d'une ligne à l'autre
" avec les flèches gauche et droite, <BS>, <Space> et ~
set whichwrap=<,>,[,],b,s,~

" Y agit comme les autres capital
nnoremap Y y$

" q: est très souvent une typo
nnoremap q: :q

" Déplacement d'une ligne à l'écran à l'autre avec les flèche haut et bas
nnoremap <silent> <UP>   gk
nnoremap <silent> <DOWN> gj
vnoremap <silent> <UP>   gk
vnoremap <silent> <DOWN> gj
inoremap <silent> <UP>   <C-O>gk
inoremap <silent> <DOWN> <C-O>gj

" Definition d'un mot vim
set iskeyword+=_,$,@,%,#,-

" Définition de la leaderkey
let mapleader="\<SPACE>"

" Pas de souris
set mouse=

" coller depuis le système
nnoremap <F8> :set paste<CR>i
au InsertLeave * set nopaste

""""""""""""""""""""""""""""""""
" Configuration de l'interface "
""""""""""""""""""""""""""""""""

" Signaler les erreurs
set errorbells
" Pas de son pour les erreurs
set visualbell

" Ne pas afficher le message d'introduction
set shortmess=Io

" Toujours dire si une commande a changé des lignes
set report=0

" Ne pas redessiner l'écran lors de l'exécution de macro
set lazyredraw

" Tout le temps soigner l'interface
if !has('nvim')
  set ttyfast
endif

" fréquence des maj du swap
set updatetime=4000

" Affiche la commande que vous êtes en train de taper
set showcmd
" Affiche le mode en cours
set showmode

" Afficher les numéros de ligne
set number
" Afficher les numéros de ligne relativement à la position du curseur
" set relativenumber
" Permet de passer de 'set number' à 'set relativenumber' avec <F4>
nnoremap <silent> <F4> :if &number \| set relativenumber \| else \| set number \| endif<CR>

" Nombre de ligne pour la ligne de commande
set cmdheight=1

" Affiche une barre de statut en bas de l'écran
set laststatus=2

" Contenu de la barre de statut
set statusline=%<%y%f%h%r%m\ Buf:\ #%n%=Line:\ %l/%L[%P]\ Col:\ %c

" Garde toujours une ligne visible à l'écran au dessus du curseur
set scrolloff=1

" Taille minimal d'une fenêtre vim
set winminheight=0

" Caractères pour les séparations
set fillchars=stl:\ ,stlnc:\ ,vert:\ ,fold:.,diff:⣿

" Plus de couleur et un titre dans un terminal graphique
if &term == "xterm" || &term == "screen-bce" || &term == "nvim"
  if !has('nvim')
    set t_Co=256
  endif
  set title
  set titlestring=VIM\ \ -\ \ %F\ %m
endif

" Option pour vimdiff
set diffopt=filler,context:3,vertical

" Permet de positionner le curseur là où il n'y a pas de caractère
set virtualedit=block

" En mode selection, le dernier caractère de la selection est inclus
set selection=inclusive

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="


"""""""""""""""""""""""""
" Présentation du texte "
"""""""""""""""""""""""""

" Nombre de colonnes (inutile, voire gênant)
"set columns=80

" Largeur maxi du texte inséré
" '72' permet de couper les lignes automatiquement à 72 caractères
" '0' désactive la fonction
set textwidth=0

" Afficher les longues lignes sur plusieurs lignes
set wrap
" Ne coupe pas les mots lors d'un retour à la ligne
set linebreak
" Comment couper les lignes
set breakat=\ ,;:.!?
" Début d'une ligne coupée
set showbreak=↪

" affiche la dernière ligne
" affiche les caractères non imprimable sous la forme <xx>
set display=lastline,uhex

" Essaye de garder le curseur dans la même colonne quand on change de ligne
set nostartofline

" Caractères utilisés pour l'affichage des caractères non imprimable lors d'un
" :list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:.,nbsp:_

" option pour la mis en page automatique
set formatoptions=tcroqn


"""""""""""""
" Recherche "
"""""""""""""

" Recherche insensible à la casse lorsque aucune majuscule n'est utilisée.
set ignorecase
set smartcase

" Recherche incrémentielle
set incsearch
" A la fin du fichier, recommence la recherche au début
set wrapscan

" utilise des regex normales (voir 'magic')
nnoremap / /\v
vnoremap / /\v

" Positionne le curseur au milieu de l'écran après une recherche
noremap n nzz
noremap N Nzz
noremap * *zz
noremap # #zz

" Permet d'activer ou désactiver la coloration avec <F12>
noremap  <silent> <F12>      :set hlsearch!<cr>
inoremap <silent> <F12> <esc>:set hlsearch!<cr>a

" Liste les occurrences de la dernière recherche
function! SearchListToggle()
  if exists("g:qfix_win")
    unlet g:qfix_win
    cclose
  else
    let g:qfix_win=1
    execute 'vimgrep /'.@/.'/g %'
    copen
    " = <C-w>L
    normal L
  endif
endfunction
nnoremap <silent> <S-F12> :call SearchListToggle()<CR>

" substitution en direct
if has("nvim")
    set inccommand=nosplit
endif


"""""""""""""""""
" Programmation "
"""""""""""""""""

" Détection automatique du type de fichier
filetype plugin indent on

" Active la coloration syntaxique
syntax enable
" Définit le jeu de couleurs utilisé
" Les jeux de couleur disponibles sont les fichiers avec l'extension .vim
" dans le répertoire /usr/share/vim/vimcurrent/colors/
set background=dark
colorscheme apprentice
colorscheme dracula

" Affiche la paire de parenthèses
set showmatch
" Temps d'affichage
set matchtime=3

" n'insère pas 2 espaces après une phrase
set nojoinspaces


"""""""""""""""
" Indentation "
"""""""""""""""

" Indentation automatique
set autoindent
" Indentation intelligente
" obsolète ?
set smartindent
" Indentation dans le style C
set cindent
" Options d'indentation pour un fichier C
set cinoptions=(0

" Taille de l'indentation
set shiftwidth=4

" << agit sur les niveaux d'indentation
set shiftround

" Comportement de <TAB> intelligent
set smarttab
" Change les tabulations en espaces
set expandtab
" Nombre d'espace d'une tabulation
set tabstop=4
set softtabstop=4

" p et P indentent lors de la copie
nnoremap <leader>p p
nnoremap <leader>P P
nnoremap <silent> p p'[v']=
nnoremap <silent> P P'[v']=

" L'indentation en mode visuel ne quitte pas le mode
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv

" Sélectionne le dernier "coller"
nnoremap <expr> gV "`[".getregtype(v:register)[0]."`]"

""""""""""""""""""
" AutoComplétion "
""""""""""""""""""

" Une petite fenêtre pour voir les complétions possibles
"set wildmenu

" Ignore certain fichier
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp

" Option de la complétion automatique
" complète avec la plus longue chaine commune et liste toutes les possibilités
" Puis complète la prochaine possibilité
set wildmode=longest:list,full

" Comment completer
set completeopt=longest,menu,preview


""""""""""
" Replis "
""""""""""

" Activer les replis
set nofoldenable

" Le découpage des replis se base sur l'indentation
"set foldmethod=indent

" Pas de replis automatique
"set foldlevel=10

" Quand ouvrir les replis
"set foldopen=mark,search,tag,undo

" Refermer automatiquement les replis
"set foldclose=all

" Ouvrir les replis avec <CR>
"nnoremap <CR> zo


"""""""""""""""""""""""""""""
" Correction orthographique "
"""""""""""""""""""""""""""""

" Desactive la correction syntaxique
set nospell
" Permet d'activer ou désactiver la coloration avec <F2>
noremap  <silent> <F2>      :set spell!<cr>
inoremap <silent> <F2> <esc>:set spell!<cr>a

" Définit les langues utilisées pour la correction
set spelllang=fr,en

" Nombre de correction proposé
set spellsuggest=5


""""""""""""""""""""""""""""""""
" Buffers, fenêtres et onglets "
""""""""""""""""""""""""""""""""

" Permet de changer de buffer sans avoir à enregistrer.
set hidden

" se déplacer dans les buffers avec Ctrl <- et ->
noremap <silent> <C-RIGHT> <ESC>:bnext<CR>
noremap <silent> <C-LEFT>  <ESC>:bprevious<CR>

" se déplacer dans les onglets avec <C-S> <- et ->
noremap <silent> <C-DOWN> <ESC>:tabnext<CR>
noremap <silent> <C-UP>  <ESC>:tabprevious<CR>

" Par défaut une nouvelle fenêtre est en bas ou à droite
set splitbelow
set splitright

" Navigation plus simple entre les fenêtres
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Nombre maximum d'onglet
set tabpagemax=10

" Afficher la barre des onglets si il y a au moins deux onglets ouvert
set showtabline=1

" apparence de la barre d'onglet
set tabline=


""""""""""""""""""""""""""
" Fonctions personnelles "
""""""""""""""""""""""""""

cmap w!! %!sudo tee > /dev/null %

" Affiche les différences entre le tampon actif et le fichier correspondant sur le disque
function! DiffOrig()
  if !exists("b:diff_active") && &buftype == "nofile"
    echoerr "E: Cannot diff a scratch buffer"
    return -1
  elseif expand("%") == ""
    echoerr "E: Buffer doesn't exist on disk"
    return -1
  endif

  if !exists("b:diff_active") || b:diff_active == 0
    let b:diff_active = 1
    let l:orig_filetype = &l:filetype

    rightbelow vnew
    let t:diff_buffer = bufnr("%")
    set buftype=nofile

    read #
    0delete_
    let &l:filetype = l:orig_filetype

    diffthis
    wincmd p
    diffthis
  else
    diffoff
    execute "bdelete " . t:diff_buffer
    let b:diff_active = 0
  endif
endfunction
nnoremap <Leader>df :call DiffOrig()<CR>

" Shell dans une fenêtre
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
    if part[0] =~ '\v[%#<]'
      let expanded_part = fnameescape(expand(part))
      let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
    endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)

" reinitialise les options quand on sort d'un vimdiff
autocmd BufWinLeave * if &diff | diffoff | endif


" Crée des buffers brouillons
function! ScratchEdit(cmd, options)
        exe a:cmd tempname()
        setl buftype=nofile bufhidden=wipe nobuflisted
        if !empty(a:options) | exe 'setl' a:options | endif
endfunction

command! -bar -nargs=* Sedit    call ScratchEdit('edit',   <q-args>)
command! -bar -nargs=* Ssplit   call ScratchEdit('split',  <q-args>)
command! -bar -nargs=* Svsplit  call ScratchEdit('vsplit', <q-args>)
command! -bar -nargs=* Stabedit call ScratchEdit('tabe',   <q-args>)

""""""""""""""""""""""""""""""""""""""
" Option spécifique pour les plugins "
""""""""""""""""""""""""""""""""""""""

" undotree
nnoremap <silent> <F9> :UndotreeToggle<CR>

"js context coloring
nnoremap <silent> <F7> :JSContextColorToggle<CR>
let g:js_context_colors_usemaps=0
let g:js_context_colors_enabled=0

" Neomake
" When writing a buffer, and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
nmap <Leader><Space>o :lopen<CR>      " open location window
nmap <Leader><Space>c :lclose<CR>     " close location window
nmap <Leader><Space>, :ll<CR>         " go to current error/warning
nmap <Leader><Space>n :lnext<CR>      " next error/warning
nmap <Leader><Space>p :lprev<CR>      " previous error/warning

" vim-operator-replace
map <Leader>s  <Plug>(operator-replace)

" vim-operator-flashy
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$

" deoplete + neosnippet + autopairs
let g:AutoPairsMapCR=0
let g:AutoPairsMultilineClose=0
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"

" vim airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" TypeScript
autocmd FileType typescript JsPreTmpl html
autocmd FileType typescript syn clear foldBraces

" bufferhint
nnoremap - :call bufferhint#Popup()<CR>
nnoremap \ :call bufferhint#LoadPrevious()<CR>

" Propose d'installer les bundles non installés
if dein#check_install()
  call dein#install()
endif
